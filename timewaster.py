"""
Helper function in python - generates more inspectable bytestreams

An example that matches for difficulty 3:

[0xd7, 0xd0, 0xff, 0xe6, 0xd4, 0x49, 0xec, 0xd1, 0xcb, 0x39, 0x1f, 0x7e, 0x1c, 0x5b, 0x34, 0x8c,
 0x87, 0x62, 0xc2, 0xf4, 0x8b, 0x59, 0x70, 0x6f, 0x11, 0xe0, 0xfc, 0xef, 0x40, 0xdd, 0x6a, 0x92,
 0x24, 0x89, 0x37, 0x33, 0x4a, 0x96, 0xe8, 0x1d, 0x59, 0xdb, 0x10, 0xee, 0xa7, 0x75, 0xbd, 0x16,
 0x30, 0xf2, 0xba, 0xcd, 0x40, 0x3f, 0x83, 0xf2, 0xb4, 0x4c, 0xf3, 0x9, 0x87, 0x61, 0x76, 0xb2]
"""


from hashlib import sha256
from secrets import token_bytes

matching = bytes([0xd7, 0xd0, 0xff, 0xe6, 0xd4, 0x49, 0xec, 0xd1, 0xcb, 0x39, 0x1f, 0x7e, 0x1c, 0x5b, 0x34, 0x8c,
             0x87, 0x62, 0xc2, 0xf4, 0x8b, 0x59, 0x70, 0x6f, 0x11, 0xe0, 0xfc, 0xef, 0x40, 0xdd, 0x6a, 0x92,
             0x24, 0x89, 0x37, 0x33, 0x4a, 0x96, 0xe8, 0x1d, 0x59, 0xdb, 0x10, 0xee, 0xa7, 0x75, 0xbd, 0x16,
             0x30, 0xf2, 0xba, 0xcd, 0x40, 0x3f, 0x83, 0xf2, 0xb4, 0x4c, 0xf3, 0x9, 0x87, 0x61, 0x76, 0xb2])

#matching = b"\xd7\xd0\xff\xe6\xd4I\xec\xd1\xcb9\x1f~\x1c[4\x8c\x87b\xc2\xf4\x8bYpo\x11\xe0\xfc\xef@\xddj\x92$\x8973J\x96\xe8\x1dY\xdb\x10\xee\xa7u\xbd\x160\xf2\xba\xcd@?\x83\xf2\xb4L\xf3\t\x87av\xb2"
test = sha256(matching).digest()
print(test)
# print(f"{matching}")
# print([hex(i) for i in matching])

while True:
    cand = token_bytes(64)
    test = sha256(cand).digest()
    if cand[:3] == test[:3]:
        print(f"{cand} partially matches own hash")
        break
